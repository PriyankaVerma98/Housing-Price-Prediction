{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "import seaborn as sns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "t = \"https://mettl-arq.s3-ap-southeast-1.amazonaws.com/questions/jp-morgan/housing/housing_train.csv\"\n",
    "test = pd.read_csv(t)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>TID</th>\n",
       "      <th>Date</th>\n",
       "      <th>Property Type</th>\n",
       "      <th>OldvNew</th>\n",
       "      <th>Duration</th>\n",
       "      <th>AddressLine1</th>\n",
       "      <th>AddressLine2</th>\n",
       "      <th>Street</th>\n",
       "      <th>Locality</th>\n",
       "      <th>Town</th>\n",
       "      <th>Taluka</th>\n",
       "      <th>District</th>\n",
       "      <th>Postcode</th>\n",
       "      <th>Price Category</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1226697</td>\n",
       "      <td>2019-04-01</td>\n",
       "      <td>F</td>\n",
       "      <td>N</td>\n",
       "      <td>L</td>\n",
       "      <td>UXCEBQ SYWKM</td>\n",
       "      <td>56</td>\n",
       "      <td>ZYHWKL KYUF</td>\n",
       "      <td>ZYHWKL XULFX</td>\n",
       "      <td>NREMYL GBQLBX</td>\n",
       "      <td>SBLMKUE HBFVYKFXORKB</td>\n",
       "      <td>SBLMKUE HBFVYKFXORKB</td>\n",
       "      <td>NG09 2CU</td>\n",
       "      <td>A</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1226784</td>\n",
       "      <td>2019-04-01</td>\n",
       "      <td>S</td>\n",
       "      <td>N</td>\n",
       "      <td>F</td>\n",
       "      <td>XOYMVYKF</td>\n",
       "      <td>0</td>\n",
       "      <td>XBEXBQ KYUF</td>\n",
       "      <td>XRFEBXOUN</td>\n",
       "      <td>SORSOBXMBK</td>\n",
       "      <td>SORSOBXMBK</td>\n",
       "      <td>ZBXM XWXXBA</td>\n",
       "      <td>CY57 9KF</td>\n",
       "      <td>A</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1226816</td>\n",
       "      <td>2019-04-01</td>\n",
       "      <td>F</td>\n",
       "      <td>N</td>\n",
       "      <td>L</td>\n",
       "      <td>JKUSBZBEE SYWKM, 0457</td>\n",
       "      <td>UCUKMNBLM 56</td>\n",
       "      <td>XMKUMVYKF KYUF</td>\n",
       "      <td>OUEE JKBBL</td>\n",
       "      <td>HRKNRLJOUN</td>\n",
       "      <td>HRKNRLJOUN</td>\n",
       "      <td>ZBXM NRFEULFX</td>\n",
       "      <td>H52 8BM</td>\n",
       "      <td>A</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1226838</td>\n",
       "      <td>2019-04-01</td>\n",
       "      <td>F</td>\n",
       "      <td>Y</td>\n",
       "      <td>L</td>\n",
       "      <td>MOB SOYSYEUMB DWUKMBK</td>\n",
       "      <td>51 KRPBK OYWXB</td>\n",
       "      <td>MKUTBSMWX ZUQ</td>\n",
       "      <td>GBQLXOUN</td>\n",
       "      <td>HKRXMYE</td>\n",
       "      <td>HUMO ULF LYKMO BUXM XYNBKXBM</td>\n",
       "      <td>HUMO ULF LYKMO BUXM XYNBKXBM</td>\n",
       "      <td>HX60 5JJ</td>\n",
       "      <td>A</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1226845</td>\n",
       "      <td>2019-04-01</td>\n",
       "      <td>F</td>\n",
       "      <td>N</td>\n",
       "      <td>L</td>\n",
       "      <td>NUGBCBUSB NULXRYLX</td>\n",
       "      <td>VEUM 500</td>\n",
       "      <td>NUGBCBUSB UPBLWB</td>\n",
       "      <td>ORJOJUMB</td>\n",
       "      <td>EYLFYL</td>\n",
       "      <td>SUNFBL</td>\n",
       "      <td>JKBUMBK EYLFYL</td>\n",
       "      <td>L3 3BM</td>\n",
       "      <td>A</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       TID        Date Property Type OldvNew Duration           AddressLine1  \\\n",
       "0  1226697  2019-04-01             F       N        L           UXCEBQ SYWKM   \n",
       "1  1226784  2019-04-01             S       N        F               XOYMVYKF   \n",
       "2  1226816  2019-04-01             F       N        L  JKUSBZBEE SYWKM, 0457   \n",
       "3  1226838  2019-04-01             F       Y        L  MOB SOYSYEUMB DWUKMBK   \n",
       "4  1226845  2019-04-01             F       N        L     NUGBCBUSB NULXRYLX   \n",
       "\n",
       "     AddressLine2            Street      Locality           Town  \\\n",
       "0              56       ZYHWKL KYUF  ZYHWKL XULFX  NREMYL GBQLBX   \n",
       "1               0       XBEXBQ KYUF     XRFEBXOUN     SORSOBXMBK   \n",
       "2    UCUKMNBLM 56    XMKUMVYKF KYUF    OUEE JKBBL     HRKNRLJOUN   \n",
       "3  51 KRPBK OYWXB     MKUTBSMWX ZUQ      GBQLXOUN        HKRXMYE   \n",
       "4        VEUM 500  NUGBCBUSB UPBLWB      ORJOJUMB         EYLFYL   \n",
       "\n",
       "                         Taluka                      District  Postcode  \\\n",
       "0          SBLMKUE HBFVYKFXORKB          SBLMKUE HBFVYKFXORKB  NG09 2CU   \n",
       "1                    SORSOBXMBK                   ZBXM XWXXBA  CY57 9KF   \n",
       "2                    HRKNRLJOUN                 ZBXM NRFEULFX   H52 8BM   \n",
       "3  HUMO ULF LYKMO BUXM XYNBKXBM  HUMO ULF LYKMO BUXM XYNBKXBM  HX60 5JJ   \n",
       "4                        SUNFBL                JKBUMBK EYLFYL    L3 3BM   \n",
       "\n",
       "  Price Category  \n",
       "0              A  \n",
       "1              A  \n",
       "2              A  \n",
       "3              A  \n",
       "4              A  "
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "testing_data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>TID</th>\n",
       "      <th>Date</th>\n",
       "      <th>Property Type</th>\n",
       "      <th>OldvNew</th>\n",
       "      <th>Duration</th>\n",
       "      <th>AddressLine1</th>\n",
       "      <th>AddressLine2</th>\n",
       "      <th>Street</th>\n",
       "      <th>Locality</th>\n",
       "      <th>Town</th>\n",
       "      <th>Taluka</th>\n",
       "      <th>District</th>\n",
       "      <th>Postcode</th>\n",
       "      <th>Price</th>\n",
       "      <th>Price Category</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1000</td>\n",
       "      <td>2018-01-01</td>\n",
       "      <td>F</td>\n",
       "      <td>N</td>\n",
       "      <td>L</td>\n",
       "      <td>9</td>\n",
       "      <td>NaN</td>\n",
       "      <td>XOUGBXCBUKB NBZX</td>\n",
       "      <td>NaN</td>\n",
       "      <td>ERLSYEL</td>\n",
       "      <td>ERLSYEL</td>\n",
       "      <td>ERLSYELXORKB</td>\n",
       "      <td>EL4 2BO</td>\n",
       "      <td>80.0</td>\n",
       "      <td>B</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1001</td>\n",
       "      <td>2018-01-01</td>\n",
       "      <td>T</td>\n",
       "      <td>Y</td>\n",
       "      <td>F</td>\n",
       "      <td>02</td>\n",
       "      <td>NaN</td>\n",
       "      <td>OYYG ZUQ</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NURFXMYLB</td>\n",
       "      <td>NURFXMYLB</td>\n",
       "      <td>GBLM</td>\n",
       "      <td>NB09 6VZ</td>\n",
       "      <td>218.5</td>\n",
       "      <td>A</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1002</td>\n",
       "      <td>2018-01-01</td>\n",
       "      <td>D</td>\n",
       "      <td>N</td>\n",
       "      <td>F</td>\n",
       "      <td>32</td>\n",
       "      <td>NaN</td>\n",
       "      <td>XYNBKX CUKG UPBLWB</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NUEPBKL</td>\n",
       "      <td>NUEPBKL OREEX</td>\n",
       "      <td>ZYKSBXMBKXORKB</td>\n",
       "      <td>ZK01 0XF</td>\n",
       "      <td>250.0</td>\n",
       "      <td>A</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1003</td>\n",
       "      <td>2018-01-01</td>\n",
       "      <td>O</td>\n",
       "      <td>N</td>\n",
       "      <td>F</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>OUMOUZUQ SEYXB</td>\n",
       "      <td>NaN</td>\n",
       "      <td>EBRSBXMBK</td>\n",
       "      <td>EBRSBXMBK</td>\n",
       "      <td>EBRSBXMBK</td>\n",
       "      <td>EB1 3HI</td>\n",
       "      <td>6050.0</td>\n",
       "      <td>B</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1004</td>\n",
       "      <td>2018-01-01</td>\n",
       "      <td>T</td>\n",
       "      <td>N</td>\n",
       "      <td>F</td>\n",
       "      <td>14</td>\n",
       "      <td>NaN</td>\n",
       "      <td>MBNBKURKB KYUF</td>\n",
       "      <td>NaN</td>\n",
       "      <td>CEQNYWMO</td>\n",
       "      <td>SRMQ YV CEQNYWMO</td>\n",
       "      <td>SRMQ YV CEQNYWMO</td>\n",
       "      <td>CE4 6WU</td>\n",
       "      <td>182.0</td>\n",
       "      <td>A</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    TID        Date Property Type OldvNew Duration AddressLine1 AddressLine2  \\\n",
       "0  1000  2018-01-01             F       N        L            9          NaN   \n",
       "1  1001  2018-01-01             T       Y        F           02          NaN   \n",
       "2  1002  2018-01-01             D       N        F           32          NaN   \n",
       "3  1003  2018-01-01             O       N        F            0          NaN   \n",
       "4  1004  2018-01-01             T       N        F           14          NaN   \n",
       "\n",
       "               Street Locality       Town            Taluka          District  \\\n",
       "0    XOUGBXCBUKB NBZX      NaN    ERLSYEL           ERLSYEL      ERLSYELXORKB   \n",
       "1            OYYG ZUQ      NaN  NURFXMYLB         NURFXMYLB              GBLM   \n",
       "2  XYNBKX CUKG UPBLWB      NaN    NUEPBKL     NUEPBKL OREEX    ZYKSBXMBKXORKB   \n",
       "3      OUMOUZUQ SEYXB      NaN  EBRSBXMBK         EBRSBXMBK         EBRSBXMBK   \n",
       "4      MBNBKURKB KYUF      NaN   CEQNYWMO  SRMQ YV CEQNYWMO  SRMQ YV CEQNYWMO   \n",
       "\n",
       "   Postcode   Price Price Category  \n",
       "0   EL4 2BO    80.0              B  \n",
       "1  NB09 6VZ   218.5              A  \n",
       "2  ZK01 0XF   250.0              A  \n",
       "3   EB1 3HI  6050.0              B  \n",
       "4   CE4 6WU   182.0              A  "
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "test.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "598400"
      ]
     },
     "execution_count": 46,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df1 = test\n",
    "len(df1[\"Postcode\"].unique() )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 1219110 entries, 0 to 1219109\n",
      "Data columns (total 15 columns):\n",
      "TID               1219110 non-null int64\n",
      "Date              1219110 non-null object\n",
      "Property Type     1219110 non-null object\n",
      "OldvNew           1219110 non-null object\n",
      "Duration          1219110 non-null object\n",
      "AddressLine1      1219110 non-null object\n",
      "AddressLine2      1219110 non-null object\n",
      "Street            1219110 non-null object\n",
      "Locality          1219110 non-null object\n",
      "Town              1219110 non-null object\n",
      "Taluka            1219110 non-null object\n",
      "District          1219110 non-null object\n",
      "Postcode          1213332 non-null object\n",
      "Price             1219110 non-null float64\n",
      "Price Category    1219110 non-null object\n",
      "dtypes: float64(1), int64(1), object(13)\n",
      "memory usage: 139.5+ MB\n"
     ]
    }
   ],
   "source": [
    "df1.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "count    1.219110e+06\n",
       "mean     3.497564e+02\n",
       "std      1.829584e+03\n",
       "min      1.001100e+01\n",
       "25%      1.455000e+02\n",
       "50%      2.300000e+02\n",
       "75%      3.550000e+02\n",
       "max      5.692000e+05\n",
       "Name: Price, dtype: float64"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df1[\"Price\"].describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Data Cleaning"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Missing Ratio</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>AddressLine2</th>\n",
       "      <td>86.497527</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Locality</th>\n",
       "      <td>62.413974</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Street</th>\n",
       "      <td>1.854796</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Postcode</th>\n",
       "      <td>0.473952</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              Missing Ratio\n",
       "AddressLine2      86.497527\n",
       "Locality          62.413974\n",
       "Street             1.854796\n",
       "Postcode           0.473952"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "all_data_na = (df1.isnull().sum() / len(df1)) * 100\n",
    "all_data_na = all_data_na.drop(all_data_na[all_data_na == 0].index).sort_values(ascending=False)[:30]\n",
    "missing_data = pd.DataFrame({'Missing Ratio' :all_data_na})\n",
    "missing_data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1219110"
      ]
     },
     "execution_count": 42,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(df1[\"Postcode\"].isnull())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [],
   "source": [
    "#replacing null with None values\n",
    "df1[\"AddressLine2\"] = df1[\"AddressLine2\"].fillna(\"None\")\n",
    "df1[\"Locality\"] = df1[\"Locality\"].fillna(\"None\")\n",
    "df1[\"Street\"] = df1[\"Street\"].fillna(\"None\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [],
   "source": [
    "# droping values where pincode is null\n",
    "df1.dropna(axis = 0, how ='any', inplace = True) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Int64Index: 1213332 entries, 0 to 1219109\n",
      "Data columns (total 15 columns):\n",
      "TID               1213332 non-null int64\n",
      "Date              1213332 non-null object\n",
      "Property Type     1213332 non-null object\n",
      "OldvNew           1213332 non-null object\n",
      "Duration          1213332 non-null object\n",
      "AddressLine1      1213332 non-null object\n",
      "AddressLine2      1213332 non-null object\n",
      "Street            1213332 non-null object\n",
      "Locality          1213332 non-null object\n",
      "Town              1213332 non-null object\n",
      "Taluka            1213332 non-null object\n",
      "District          1213332 non-null object\n",
      "Postcode          1213332 non-null object\n",
      "Price             1213332 non-null float64\n",
      "Price Category    1213332 non-null object\n",
      "dtypes: float64(1), int64(1), object(13)\n",
      "memory usage: 148.1+ MB\n"
     ]
    }
   ],
   "source": [
    "df1.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Feature Engineering"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.preprocessing import LabelEncoder"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {},
   "outputs": [],
   "source": [
    "#encoding on labels\n",
    "\n",
    "cols = ('OldvNew', 'Duration', 'Property Type', 'Price Category', 'Postcode')\n",
    "for c in cols:\n",
    "    lbl = LabelEncoder() \n",
    "    lbl.fit(list(df1[c].values)) \n",
    "    df1[c] = lbl.transform(list(df1[c].values))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>TID</th>\n",
       "      <th>Date</th>\n",
       "      <th>Property Type</th>\n",
       "      <th>OldvNew</th>\n",
       "      <th>Duration</th>\n",
       "      <th>AddressLine1</th>\n",
       "      <th>AddressLine2</th>\n",
       "      <th>Street</th>\n",
       "      <th>Locality</th>\n",
       "      <th>Town</th>\n",
       "      <th>Taluka</th>\n",
       "      <th>District</th>\n",
       "      <th>Postcode</th>\n",
       "      <th>Price</th>\n",
       "      <th>Price Category</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1000</td>\n",
       "      <td>2018-01-01</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>9</td>\n",
       "      <td>None</td>\n",
       "      <td>XOUGBXCBUKB NBZX</td>\n",
       "      <td>None</td>\n",
       "      <td>ERLSYEL</td>\n",
       "      <td>ERLSYEL</td>\n",
       "      <td>ERLSYELXORKB</td>\n",
       "      <td>78508</td>\n",
       "      <td>80.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1001</td>\n",
       "      <td>2018-01-01</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>02</td>\n",
       "      <td>None</td>\n",
       "      <td>OYYG ZUQ</td>\n",
       "      <td>None</td>\n",
       "      <td>NURFXMYLB</td>\n",
       "      <td>NURFXMYLB</td>\n",
       "      <td>GBLM</td>\n",
       "      <td>346612</td>\n",
       "      <td>218.5</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1002</td>\n",
       "      <td>2018-01-01</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>32</td>\n",
       "      <td>None</td>\n",
       "      <td>XYNBKX CUKG UPBLWB</td>\n",
       "      <td>None</td>\n",
       "      <td>NUEPBKL</td>\n",
       "      <td>NUEPBKL OREEX</td>\n",
       "      <td>ZYKSBXMBKXORKB</td>\n",
       "      <td>572077</td>\n",
       "      <td>250.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1003</td>\n",
       "      <td>2018-01-01</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>None</td>\n",
       "      <td>OUMOUZUQ SEYXB</td>\n",
       "      <td>None</td>\n",
       "      <td>EBRSBXMBK</td>\n",
       "      <td>EBRSBXMBK</td>\n",
       "      <td>EBRSBXMBK</td>\n",
       "      <td>62842</td>\n",
       "      <td>6050.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1004</td>\n",
       "      <td>2018-01-01</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>14</td>\n",
       "      <td>None</td>\n",
       "      <td>MBNBKURKB KYUF</td>\n",
       "      <td>None</td>\n",
       "      <td>CEQNYWMO</td>\n",
       "      <td>SRMQ YV CEQNYWMO</td>\n",
       "      <td>SRMQ YV CEQNYWMO</td>\n",
       "      <td>31006</td>\n",
       "      <td>182.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    TID        Date  Property Type  OldvNew  Duration AddressLine1  \\\n",
       "0  1000  2018-01-01              1        0         1            9   \n",
       "1  1001  2018-01-01              4        1         0           02   \n",
       "2  1002  2018-01-01              0        0         0           32   \n",
       "3  1003  2018-01-01              2        0         0            0   \n",
       "4  1004  2018-01-01              4        0         0           14   \n",
       "\n",
       "  AddressLine2              Street Locality       Town            Taluka  \\\n",
       "0         None    XOUGBXCBUKB NBZX     None    ERLSYEL           ERLSYEL   \n",
       "1         None            OYYG ZUQ     None  NURFXMYLB         NURFXMYLB   \n",
       "2         None  XYNBKX CUKG UPBLWB     None    NUEPBKL     NUEPBKL OREEX   \n",
       "3         None      OUMOUZUQ SEYXB     None  EBRSBXMBK         EBRSBXMBK   \n",
       "4         None      MBNBKURKB KYUF     None   CEQNYWMO  SRMQ YV CEQNYWMO   \n",
       "\n",
       "           District  Postcode   Price  Price Category  \n",
       "0      ERLSYELXORKB     78508    80.0               1  \n",
       "1              GBLM    346612   218.5               0  \n",
       "2    ZYKSBXMBKXORKB    572077   250.0               0  \n",
       "3         EBRSBXMBK     62842  6050.0               1  \n",
       "4  SRMQ YV CEQNYWMO     31006   182.0               0  "
      ]
     },
     "execution_count": 63,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df1.head(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import seaborn as sns\n",
    "import matplotlib\n",
    "import matplotlib.pyplot as plt\n",
    "import warnings"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.scatter(df1.OldvNew , df1.Price)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['EYLFYL', 'NULSOBXMBK', 'ZUEXUEE', 'OUERVUA', \"HRXOYC'X XMYKMVYKF\",\n",
       "       'XMULXMBF', 'NUEPBKL', 'KBUFRLJ', 'LBZSUXMEB WCYL MQLB',\n",
       "       'XOBVVRBEF', 'SOBENXVYKF', 'HKRJOMYL', 'EYWJOHYKYWJO',\n",
       "       'NREMYL GBQLBX', 'OYFFBXFYL', 'HUMO'], dtype=object)"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dfx = df1[df1[\"Price\"] >= 100000]\n",
    "dfx['Town'].unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "16"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(dfx['Town'].unique())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.scatter(dfx[\"Town\"] , dfx.Price)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.scatter(df1[\"Price Category\"] , df1.Price)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.scatter(df1[\"Duration\"] , df1.Price)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAYkAAAD4CAYAAAAZ1BptAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4xLjAsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy+17YcXAAAVW0lEQVR4nO3df2xd533f8fe3lNwyyxw6Np1alDq5jSDUrlErIWwFxrA2GUzZa2YtawC76SxkRjUEDtAugVapyaD8KuxCWxJ4TTy4sGu5bZy4mUyrmVNWsFMMC2zFVGWHdTLVSpZapLyIrkw3qdlEpr/74z6Ur6h7SF5J5D0i3y+A4D3f+5z7PLyQ+OF5znPOjcxEkqRWfqLTA5Ak1ZchIUmqZEhIkioZEpKkSoaEJKnSik4P4Fy75JJLcu3atZ0ehiSdVw4cOPBiZvbOrC+5kFi7di3Dw8OdHoYknVci4m9b1Z1ukiRVMiQkSZUMCUlSJUNCklTJkJAkVVpyq5sknd8GD46xa+gQRycmWdXTzbaB9Wze0NfpYS1bhoSk2hg8OMaOPSNMnpgCYGxikh17RgAMig5xuklSbewaOnQyIKZNnphi19ChDo1IhoSk2jg6MdlWXQvPkJBUG6t6utuqa+EZEpJqY9vAerpXdp1S617ZxbaB9R0akTxxLak2pk9Ou7qpPgwJSbWyeUOfoVAjTjdJkioZEpKkSoaEJKmSISFJqmRISJIqGRKSpEqGhCSpkiEhSapkSEiSKhkSkqRKhoQkqZIhIUmqZEhIkioZEpKkSoaEJKmSISFJqjSvkIiI70XESEQ8HRHDpfbmiNgXEc+V7xeVekTEXRFxOCK+GRFva3qdLaX9cxGxpan+9vL6h8u+MVsfkqTF0c6RxC9n5tWZ2V+2twOPZeY64LGyDXADsK58bQXuhsYvfGAncC1wDbCz6Zf+3aXt9H6b5uhDkrQIzma66SZgd3m8G9jcVH8gG54EeiLiMmAA2JeZxzPzJWAfsKk8d2FmPpGZCTww47Va9SFJWgTzDYkE/iIiDkTE1lJ7S2a+AFC+X1rqfcCRpn1HS222+miL+mx9nCIitkbEcEQMj4+Pz/NHkiTNZcU8212XmUcj4lJgX0T8n1naRotankF93jLzHuAegP7+/rb2lSRVm9eRRGYeLd+PAQ/TOKfw/TJVRPl+rDQfBdY07b4aODpHfXWLOrP0IUlaBHOGRET8k4j4p9OPgeuBvwb2AtMrlLYAj5THe4FbyyqnjcDLZapoCLg+Ii4qJ6yvB4bKcz+IiI1lVdOtM16rVR+SpEUwn+mmtwAPl1WpK4AvZOafR8RTwEMRcRvwPPDe0v5R4EbgMPAK8H6AzDweEZ8EnirtPpGZx8vjDwD3A93AV8sXwJ0VfUiSFkE0FhQtHf39/Tk8PNzpYUjSeSUiDjRd4nCSV1xLkioZEpKkSoaEJKmSISFJqmRISJIqGRKSpEqGhCSpkiEhSapkSEiSKs33LrCStCg+OjjCg/uPMJVJVwS3XLuGT22+qtPDWrYMCUm18dHBEf74yedPbk9lntw2KDrD6SZJtfHg/iNt1bXwDAlJtTFVccPRqroWniEhqTa6otUHVVbXtfAMCUm1ccu1a9qqa+F54lpSbUyfnHZ1U334oUOSJD90SJLUPkNCklTJkJAkVTIkJEmVXN0kqVa8d1O9GBKSasN7N9WP002SasN7N9WPISGpNrx3U/0YEpJqw3s31c+8QyIiuiLiYER8pWxfHhH7I+K5iPhSRFxQ6j9Ztg+X59c2vcaOUj8UEQNN9U2ldjgitjfVW/YhaWny3k31086RxG8C327a/j3gM5m5DngJuK3UbwNeysy3Ap8p7YiIK4CbgSuBTcDnS/B0AZ8DbgCuAG4pbWfrQ9IS9KnNV/HrG3/m5JFDVwS/vvFnPGndQfO6d1NErAZ2A78LfAh4NzAO/HRmvhoR7wA+lpkDETFUHj8RESuA/wf0AtsBMvOO8ppDwMdKFx/LzIFS31Fqd1b1MdtYvXeTJLXvbO/d9FngPwGvle2LgYnMfLVsjwJ95XEfcASgPP9yaX+yPmOfqvpsfcz84bZGxHBEDI+Pj8/zR5IkzWXOkIiIXwGOZeaB5nKLpjnHc+eqfnox857M7M/M/t7e3lZNJElnYD4X010H/OuIuBH4KeBCGkcWPRGxovylvxo4WtqPAmuA0TLd9CbgeFN9WvM+reovztKHJGkRzHkkkZk7MnN1Zq6lceL58cx8H/A14FdLsy3AI+Xx3rJNef7xbJz42AvcXFY/XQ6sA74BPAWsKyuZLih97C37VPUhSVoEZ3OdxG8DH4qIwzTOH9xb6vcCF5f6h3j9hPWzwEPAt4A/B27PzKlylPBBYIjG6qmHStvZ+pAkLQI/mU6S5CfTSZLaZ0hIkioZEpKkSoaEJKmSISFJqmRISJIqGRKSpEqGhCSpkiEhSapkSEiSKhkSkqRKhoQkqZIhIUmqZEhIkioZEpKkSoaEJKmSISFJqrSi0wOQpGaDB8fYNXSIoxOTrOrpZtvAejZv6Ov0sJYtQ0JSbQweHGPHnhEmT0wBMDYxyY49IwAGRYc43SSpNnYNHToZENMmT0yxa+hQh0YkQ0JSbRydmGyrroVnSEiqjVU93W3VtfAMCUm1sW1gPd0ru06pda/sYtvA+g6NSJ64llQb0yenXd1UH4aEpFrZvKHPUKgRQ0JSrXidRL3MeU4iIn4qIr4REc9ExLMR8fFSvzwi9kfEcxHxpYi4oNR/smwfLs+vbXqtHaV+KCIGmuqbSu1wRGxvqrfsQ9LSNH2dxNjEJMnr10kMHhzr9NCWrfmcuP4R8M7M/EXgamBTRGwEfg/4TGauA14CbivtbwNeysy3Ap8p7YiIK4CbgSuBTcDnI6IrIrqAzwE3AFcAt5S2zNKHpCXI6yTqZ86QyIYfls2V5SuBdwJfLvXdwOby+KayTXn+XRERpf7FzPxRZv5f4DBwTfk6nJnfzcwfA18Ebir7VPUhaQnyOon6mdcS2PIX/9PAMWAf8B1gIjNfLU1GgelJwz7gCEB5/mXg4ub6jH2q6hfP0sfM8W2NiOGIGB4fH5/PjySphrxOon7mFRKZOZWZVwOrafzl//OtmpXvUfHcuaq3Gt89mdmfmf29vb2tmkg6D3idRP20tbopMyci4i+BjUBPRKwof+mvBo6WZqPAGmA0IlYAbwKON9WnNe/Tqv7iLH1IWoK8TqJ+5gyJiOgFTpSA6Ab+JY0Tyl8DfpXGOYQtwCNll71l+4ny/OOZmRGxF/hCRHwaWAWsA75B44hhXURcDozROLn9a2Wfqj4kLVFeJ1Ev8zmSuAzYXVYh/QTwUGZ+JSK+BXwxIj4FHATuLe3vBf4oIg7TOIK4GSAzn42Ih4BvAa8Ct2fmFEBEfBAYArqA+zLz2fJav13RhyRpEURmy2n+81Z/f38ODw93ehiSdF6JiAOZ2T+z7g3+JEmVDAlJUiVDQpJUyZCQJFXyLrCSauWjgyM8uP8IU5l0RXDLtWv41OarOj2sZcuQkFQbHx0c4Y+ffP7k9lTmyW2DojOcbpJUGw/uP9JWXQvPkJBUG1MV121V1bXwDAlJUiVDQpJUyZCQJFUyJCTVxkVvWNlWXQvPkJBUGzvffSUru079vLGVXcHOd1/ZoRHJ6yQk1YYfOlQ/hoSkWvFDh+rF6SZJUiVDQpJUyZCQJFUyJCRJlQwJSVIlQ0KSVMmQkCRVMiQkSZUMCUlSJUNCklRpzpCIiDUR8bWI+HZEPBsRv1nqb46IfRHxXPl+UalHRNwVEYcj4psR8bam19pS2j8XEVua6m+PiJGyz10REbP1IWnpGjw4xnV3Ps7l2/8n1935OIMHxzo9pGVtPkcSrwIfzsyfBzYCt0fEFcB24LHMXAc8VrYBbgDWla+twN3Q+IUP7ASuBa4Bdjb90r+7tJ3eb1OpV/UhaQkaPDjGjj0jjE1MksDYxCQ79owYFB00Z0hk5guZ+Vfl8Q+AbwN9wE3A7tJsN7C5PL4JeCAbngR6IuIyYADYl5nHM/MlYB+wqTx3YWY+kZkJPDDjtVr1IWkJ2jV0iMkTU6fUJk9MsWvoUIdGpLbOSUTEWmADsB94S2a+AI0gAS4tzfqAI027jZbabPXRFnVm6WPmuLZGxHBEDI+Pj7fzI0mqkbGJybbqWnjzDomIeCPwP4Dfysy/n61pi1qeQX3eMvOezOzPzP7e3t52dpVUI13R6tdBdV0Lb14hEREraQTEn2TmnlL+fpkqonw/VuqjwJqm3VcDR+eor25Rn60PSUvQVLb++7CqroU3n9VNAdwLfDszP9301F5geoXSFuCRpvqtZZXTRuDlMlU0BFwfEReVE9bXA0PluR9ExMbS160zXqtVH5KWID/jun7m88l01wH/DhiJiKdL7XeAO4GHIuI24HngveW5R4EbgcPAK8D7ATLzeER8EniqtPtEZh4vjz8A3A90A18tX8zSh6QlqOqAwQOJzpkzJDLzf9P6vAHAu1q0T+D2ite6D7ivRX0Y+IUW9b9r1YekpenlyRNt1bXwvOJaUm28qbv1tFJVXQtvPtNN0mkGD46xa+gQRycmWdXTzbaB9X54vc7aianX2qpr4RkSatv0VbHTFz1NXxULGBQ6K//w46m26lp4TjepbV4VKy0fhoTadrTi6tequqTzl9NNhXPs87eqp7vlbRJW9XR3YDSSFpJHEnjnyXZtG1hP98quU2rdK7vYNrC+QyOStFAMCZxjb9fmDX3c8Z6r6OvpJoC+nm7ueM9VHnlJS5DTTTjHfiY2b+gzFKRlwCMJqufSnWOXtNwZEjjHLklVnG7i9QvAXN0kSacyJArn2CXpdE43SZIqGRKSpEqGhCSpkiEhSapkSEiSKhkSkqRKhoQkqZIhIUmqZEhIkioZEpKkSoaEJKmSISFJqmRISJIqzRkSEXFfRByLiL9uqr05IvZFxHPl+0WlHhFxV0QcjohvRsTbmvbZUto/FxFbmupvj4iRss9dERGz9SFJWjzzOZK4H9g0o7YdeCwz1wGPlW2AG4B15WsrcDc0fuEDO4FrgWuAnU2/9O8ubaf32zRHH5KkRTJnSGTm/wKOzyjfBOwuj3cDm5vqD2TDk0BPRFwGDAD7MvN4Zr4E7AM2lecuzMwnMjOBB2a8Vqs+JEmL5EzPSbwlM18AKN8vLfU+4EhTu9FSm60+2qI+Wx+niYitETEcEcPj4+Nn+CNJkmY61yeuo0Utz6Delsy8JzP7M7O/t7e33d0lSRXONCS+X6aKKN+PlfoosKap3Wrg6Bz11S3qs/UhSVokZxoSe4HpFUpbgEea6reWVU4bgZfLVNEQcH1EXFROWF8PDJXnfhARG8uqpltnvFarPiRJi2TFXA0i4kHgl4BLImKUxiqlO4GHIuI24HngvaX5o8CNwGHgFeD9AJl5PCI+CTxV2n0iM6dPhn+AxgqqbuCr5YtZ+pAkLZI5QyIzb6l46l0t2iZwe8Xr3Afc16I+DPxCi/rftepDkrR4vOJaklTJkJAkVZpzuklqZfDgGLuGDnF0YpJVPd1sG1jP5g19c+8o6bxiSKhtgwfH2LFnhMkTUwCMTUyyY88IgEEhLTFON6ltu4YOnQyIaZMnptg1dKhDI5K0UAwJte3oxGRbdUnnL6ebCufY529VTzdjLQJhVU93B0YjaSF5JMHrc+xjE5Mkr8+xDx4c6/TQamnbwHq6V3adUute2cW2gfUdGpGkhWJI4Bx7uzZv6OOO91xFX083AfT1dHPHe67yyEtagpxuwjn2M7F5Q5+hIC0DhgTOsWtheb5L5zOnm3COXQvH810633kkwesXgPnX3vz51/H8zHa+y/dL58JC/180JArn2Odv8OAY2778DCemGh8iODYxybYvPwN4xfVMnu/SQlqMux8YEsX7/uAJvv6d4ye3r/u5N/Mnv/GODo6ovj7+Z8+eDIhpJ6aSj//Zs4bEDG/qXsnE5ImWdelsLcaRquckOD0gAL7+neO87w+e6NCI6u2lV07/pTdbfTmLVp/iPktdasdiHKkaEnBaQMxVl+ZroiI4q+pSO6pWYJ7LlZmGhNrWUzFVUlVfznreUPFeVdSldizGykxDQm37lV+8rK36cvaPM+aL56pL7ViMux8YEmrbV555oa36cjZ54rW26lLduLpJbWu1Wme2uqSFMXhwjA//6TNMvfb6cvQP/+m5XY7ukYQknac+8vDIyYCYNvVa8pGHR85ZH4aEJJ2n/uHHrc9tVdXPhCEhSapkSEiSKhkSkqRKtQ+JiNgUEYci4nBEbO/0eCRpOal1SEREF/A54AbgCuCWiLiis6OSpOWj1iEBXAMczszvZuaPgS8CN3V4TJK0bNQ9JPqAI03bo6V2iojYGhHDETE8Pj6+aIOTpKWu7iHR6obKeVoh857M7M/M/t7e3kUYliQtD3UPiVFgTdP2auBoh8YiSctO3UPiKWBdRFweERcANwN7z3Un37vzX7VVX+58v+bP96o9vl/tWYz3KzJPm72plYi4Efgs0AXcl5m/O1v7/v7+HB4eXpSxSdJSEREHMrN/Zr32d4HNzEeBRzs9Dklajuo+3SRJ6iBDQpJUyZCQJFUyJCRJlWq/uqldETEO/O1ZvMQlwIvnaDjLge/X/Pletcf3qz1n+379s8w87WrkJRcSZysihlstA1Nrvl/z53vVHt+v9izU++V0kySpkiEhSapkSJzunk4P4Dzj+zV/vlft8f1qz4K8X56TkCRV8khCklTJkJAkVar9Df4WS0RMASNNpc2Z+b0ODae2IuJi4LGy+dPAFDD9cYDXlI+ZVdH072ol8CqwG/hsZr7W0YHVWESspvHZ9lfQ+EP2K8A2/221FhEfAX6Nxv/F14D/kJn7z9nre06iISJ+mJlv7PQ4zicR8THgh5n5Xzo9lrpq/ncVEZcCXwC+npk7OzuyeoqIAPYDd2fmH0ZEF40Tssczc1tnR1c/EfEO4NPAL2XmjyLiEuCCzDxnH87mdJO0SDLzGLAV+GD5ZajTvRP4x8z8Q4DMnAL+I/DvI+INHR1ZPV0GvJiZPwLIzBfPZUCAIdGsOyKeLl8Pd3owWpoy87s0/t9d2umx1NSVwIHmQmb+PfA88NaOjKje/gJYExF/ExGfj4h/ca478JzE6yYz8+pOD0LLgkcR1QJoNQdeVV/WMvOHEfF24J8Dvwx8KSK2Z+b956oPjySkRRQRP0vjBOOxTo+lpp4FTrn/UERcCKwBvtOREdVcZk5l5l+W81wfBP7tuXx9Q0JaJBHRC/x34PfTFSNVHgPeEBG3ApQT1/8VuD8zX+noyGooItZHxLqm0tWc3V2wT+N0k7SwuiPiaV5fAvtHNFajqIXMzIj4N8DnI+I/0/hD9lHgdzo7stp6I/DfIqKHxr+vwzQWR5wzLoGVJFVyukmSVMmQkCRVMiQkSZUMCUlSJUNCklTJkJAkVTIkJEmV/j+6hRpZFt4b0wAAAABJRU5ErkJggg==\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.scatter(df1[\"Property Type\"] , df1.Price)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Modelling "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.linear_model import ElasticNet, Lasso,  BayesianRidge, LassoLarsIC\n",
    "from sklearn.ensemble import RandomForestRegressor,  GradientBoostingRegressor\n",
    "from sklearn.kernel_ridge import KernelRidge\n",
    "from sklearn.pipeline import make_pipeline\n",
    "from sklearn.preprocessing import RobustScaler\n",
    "from sklearn.base import BaseEstimator, TransformerMixin, RegressorMixin, clone\n",
    "from sklearn.model_selection import KFold, cross_val_score, train_test_split\n",
    "from sklearn.metrics import mean_squared_error\n",
    "import xgboost as xgb"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
